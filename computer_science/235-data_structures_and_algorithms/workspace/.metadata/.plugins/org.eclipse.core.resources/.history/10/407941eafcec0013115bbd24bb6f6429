/*
 * main.cpp
 *
 *  Created on: Jun 4, 2014
 *      Author: Benjamin Thompson
 *
 *  Midterm CS 235
 */

// Input/Output
#include <iostream>

// Data Types
#include <string>
#include <fstream>
#include "LinkedList.h"
#include "Person.h"
#include "Node.h"

/**
 * Menu for the program
 *
 */
void menu()
{
	std::cout << "\t1. Create Roster" << std::endl
			<< "\t2. View Roster" << std::endl
			<< "\t3. Shuffle Roster" << std::endl
			<< "\t4. Create Teams" << std::endl
			<< "\t5. View Teams" << std::endl
			<< "\t6. User Play" << std::endl
			<< "\t7. Auto Play" << std::endl
			<< "\t8. Quit" << std::endl
			<< "Enter the number you wish to execute: ";
}


/**
 * Builds the given LinkedList from a user inputed file
 *
 * @param LinkedList Roster
 *
 */
void CreateRoster(LinkedList& Roster)
{

	std::string file;	// fix this
	std::cout << "\n\n\n\nPlease enter the filename: ";
	std::cin >> file;

	std::ifstream in(file.c_str());
	if(!in.is_open())
	{
		std::cout << "\n\n\n\nERROR: Not a valid filename.\n";
		return;
	}


	std::string name;
	int speed;
	int str;
	while(in >> name >> speed >> str)
	{
		Roster.push(Person(name, speed, str));
	}
	in.close();
}


/**
 *  Displays the contents of the given LinkedList
 *
 *  @param LinkedList Roster
 *
 */
void ViewRoster(LinkedList& Roster)
{
	if(Roster.Empty())
	{
		std::cout << "\n\nRoster Empty\n\n";
		return;
	}
	Roster.Display();
}


/**
 * Shuffles the given LinkedList
 *
 * @param LinkedList Roster
 *
 */
void ShuffleRoster(LinkedList& Roster)
{
	if(Roster.Empty())
	{
		std::cout << "\n\nRoster Empty\n\n";
		return;
	}
	Roster.Shuffle();
}


/**
 * Create Teams from the Roster
 *
 * @param Roster
 * @param TeamA
 * @param TeamB
 *
 */
void CreateTeams(LinkedList& Roster, LinkedList& TeamA, LinkedList& TeamB)
{
	if (Roster.size() < 4)
	{
		std::cout << "\n\nERROR: At least 4 people needed on the Roster\n\n";
		return;
	}
	if (!TeamA.Empty())
	{
		TeamA.clear();
	}
	if (!TeamB.Empty())
	{
		TeamB.clear();
	}
	int size = Roster.size() / 2;

	Roster.CreateTeams(TeamA, TeamB, size);
}


/**
 * Displays the Teams
 *
 * @param TeamA
 * @param TeamB
 *
 */
void ViewTeams(LinkedList& TeamA, LinkedList& TeamB)
{
	std::cout << "Team A: \n";
	TeamA.Display();
	std::cout << "Team B: \n";
	TeamB.Display();
}

void UserPlay(LinkedList& TeamA, LinkedList& TeamB)
{
	std::string nameA;
	Node* A = NULL;
	std::string nameB;
	Node* B = NULL;

	while(TeamA.size() != 1 && TeamB.size() != 1)
	{
		while(true)
		{
			std::cout << "Team A: ";
			TeamA.DisplayPlayers();
			std::cout << "\tPick: ";
			std::cin >> nameA;
			if(std::cin.fail())
			{
				std::cin.clear();
			}
			else if(!TeamA.find(A, nameA))
			{
				std::cout << "\nERROR: Name not found. \n";
			}
			else
			{
				break;
			}
		}
		while(true)
		{
			std::cout << "Team B: ";
			TeamB.DisplayPlayers();
			std::cout << "\tPick: ";
			std::cin >> nameB;
			if(std::cin.fail())
			{
				std::cin.clear();
			}
			else if(!TeamB.find(B, nameB))
			{
				std::cout << "\nERROR: Name not found. \n";
			}
			else
			{
				break;
			}
		}
		if(B->next == NULL)
		{
			if((B->item.str + B->prev->item.str) < (A->item.speed + A->item.str))
			{
				TeamA.add(1);
				TeamB.add(-1);
				if(B->item.str > B->prev->item.str)
				{
					// B goes after A
					Node * temp = B->prev;
					temp->next = B->next;
					temp = temp->next;
					temp->prev = B->prev;
					if(A->next != NULL)
					{
						temp = A->next;
						A->next = B;
						B->prev = A;
						temp->prev = B;
						B->next = temp;
					}
					else
					{
						A->next = B;
						B->prev = A;
						B->next = NULL;
					}
				}
				else
				{
					// B->prev goes after A
					B = B->prev;
					Node * temp = B->prev;
					temp->next = B->next;
					temp = temp->next;
					temp->prev = B->prev;
					if(A->next != NULL)
					{
						temp = A->next;
						A->next = B;
						B->prev = A;
						temp->prev = B;
						B->next = temp;
					}
					else
					{
						A->next = B;
						B->prev = A;
						B->next = NULL;
					}
				}
			}
			else
			{
				TeamB.add(1);
				TeamA.add(-1);
				// A goes before B
				std::cout << "not functional";
			}
		}
		else
		{
			if((B->item.str + B->next->item.str) < (A->item.speed + A->item.str))
			{
				TeamA.add(1);
				TeamB.add(-1);
				if(B->item.str > B->prev->item.str)
				{
					// B goes after A
					Node * temp = B->prev;
					temp->next = B->next;
					temp = temp->next;
					temp->prev = B->prev;
					if(A->next != NULL)
					{
						temp = A->next;
						A->next = B;
						B->prev = A;
						temp->prev = B;
						B->next = temp;
					}
					else
					{
						A->next = B;
						B->prev = A;
						B->next = NULL;
					}
				}
				else
				{
					// B->next goes after A
					B = B->next;
					Node * temp = B->prev;
					temp->next = B->next;
					temp = temp->next;
					temp->prev = B->prev;
					if(A->next != NULL)
					{
						temp = A->next;
						A->next = B;
						B->prev = A;
						temp->prev = B;
						B->next = temp;
					}
					else
					{
						A->next = B;
						B->prev = A;
						B->next = NULL;
					}
				}
			}
			else
			{
				// A goes after B
				Node * temp = A->prev;
				temp->next = A->next;
				temp = temp->next;
				temp->prev = A->prev;
				if(A->next != NULL)
				{
					temp = B->next;
					B->next = A;
					A->prev = B;
					temp->prev = A;
					A->next = temp;
				}
				else
				{
					B->next = A;
					A->prev = B;
					A->next = NULL;
				}
			}
		}
		if(TeamA.size() == 1 || TeamB.size() == 1)
		{
			break;
		}



		while(true)
		{
			std::cout << "Team B: ";
			TeamB.DisplayPlayers();
			std::cout << "\tPick: ";
			std::cin >> nameA;
			if(std::cin.fail())
			{
				std::cin.clear();
			}
			else if(!TeamB.find(B, nameB))
			{
				std::cout << "\nERROR: Name not found. \n";
			}
			else
			{
				break;
			}
		}
		while(true)
		{
			std::cout << "Team A: ";
			TeamA.DisplayPlayers();
			std::cout << "\tPick: ";
			std::cin >> nameA;
			if(std::cin.fail())
			{
				std::cin.clear();
			}
			else if(!TeamA.find(A, nameA))
			{
				std::cout << "\nERROR: Name not found. \n";
			}
			else
			{
				break;
			}
		}
		if(A->next == NULL)
		{
			if((A->item.str + A->prev->item.str) < (B->item.speed + B->item.str))
			{
				if(A->item.str > A->prev->item.str)
				{
					// A goes after B

				}
				else
				{
					// A->prev goes after B
					A = A->prev;
					Node * temp = A->prev;
					temp->next = A->next;
					temp = temp->next;
					temp->prev = A->prev;
					if(B->next != NULL)
					{
						temp = B->next;
						B->next = A;
						A->prev = B;
						temp->prev = A;
						A->next = temp;
					}
					else
					{
						B->next = A;
						A->prev = B;
						A->next = NULL;
					}

				}
			}
			else
			{
				// B goes before A
				std::cout << "not functional";
			}
		}
		else
		{
			if((A->item.str + A->next->item.str) < (B->item.speed + B->item.str))
			{
				if(A->item.str > A->prev->item.str)
				{
					// A goes after B
					// A goes after B
					Node * temp = A->prev;
					temp->next = A->next;
					temp = temp->next;
					temp->prev = A->prev;
					if(B->next != NULL)
					{
						temp = B->next;
						B->next = A;
						A->prev = B;
						temp->prev = A;
						A->next = temp;
					}
					else
					{
						B->next = A;
						A->prev = B;
						A->next = NULL;
					}
				}
				else
				{
					// A->next goes after B
					A = A->next;
					Node * temp = A->prev;
					temp->next = A->next;
					temp = temp->next;
					temp->prev = A->prev;
					if(B->next != NULL)
					{
						temp = B->next;
						B->next = A;
						A->prev = B;
						temp->prev = A;
						A->next = temp;
					}
					else
					{
						B->next = A;
						A->prev = B;
						A->next = NULL;
					}
				}
			}
			else
			{
				TeamA.add(1);
				TeamB.add(-1);
				// B goes after A
				Node * temp = B->prev;
				temp->next = B->next;
				temp = temp->next;
				temp->prev = B->prev;
				if(B->next != NULL)
				{
					temp = A->next;
					A->next = B;
					B->prev = A;
					temp->prev = B;
					B->next = temp;
				}
				else
				{
					A->next = B;
					B->prev = A;
					B->next = NULL;
				}

			}
		}
	}
}

void AutoPlay(LinkedList& TeamA, LinkedList& TeamB)
{

}


int main()
{

	LinkedList Roster;
	LinkedList TeamA;
	LinkedList TeamB;

	while(true)
	{
		menu();
		int input;
		std::cin >> input;
		if(std::cin.fail())
		{
			//invalid input
		}
		else if(input == 1)	// Create Rooster
		{
			CreateRoster(Roster);
		}
		else if(input == 2)	// View
		{
			ViewRoster(Roster);
		}
		else if(input == 3)	// Shuffle
		{
			ShuffleRoster(Roster);
		}
		else if(input == 4)	// Create Teams
		{
			CreateTeams(Roster, TeamA, TeamB);
		}
		else if(input == 5)	// View
		{
			ViewTeams(TeamA, TeamB);
		}
		else if(input == 6)	// User Play
		{
			UserPlay(TeamA, TeamB);
		}
		else if(input == 7)	// Auto Play
		{
			AutoPlay(TeamA, TeamB);
		}
		else if(input == 8)	// Quit
		{
			break;
		}
		if(std::cin.fail())
		{
			std::cin.clear();
			std::cin.ignore(10000,'\n');
			std::cout << "ERROR: Invalid input. Please enter a number."
					<< std::endl;
		}

	}

}
